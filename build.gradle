plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group

if (System.env.CI == "true") {
    def branch
    branch = System.env.GITHUB_REF
    branch = branch.substring(branch.lastIndexOf("/") + 1)

    version = "${project.mod_version}+a${System.env.GITHUB_RUN_NUMBER}.${branch}-fabric"
}
else {
    version = "${project.mod_version}+${project.minecraft_version}-fabric"
}

minecraft {}

repositories {
    maven { url "https://jitpack.io/" }
    maven { url "https://maven.dblsaiko.net/" }
    maven { url "https://server.bbkr.space/artifactory/libs-release/" }
    maven { url 'https://maven.blamejared.com/' }
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.shadew.net/" }
    maven { url "https://maven.enginehub.org/repo/" }
}

dependencies {
    // base
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_build}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    // chord
    include("com.github.andantedevs:chord:${project.chord_version}") { exclude(group: "net.fabricmc.fabric-api") }
    modImplementation("com.github.andantedevs:chord:${project.chord_version}") { exclude(group: "net.fabricmc.fabric-api") }

    // runtime utils
    modRuntime("io.github.prospector:modmenu:${project.mod_menu_version}") { exclude(group: "net.fabricmc.fabric-api") }
    modRuntime("com.github.joaoh1:OkZoomer:${project.okzoomer_version}") { exclude(group: "net.fabricmc.fabric-api") }

    // modRuntime ("com.github.jellysquid3:sodium-fabric:${project.sodium_version}") { exclude ( group: "net.fabricmc.fabric-api" ) }
    modRuntime("com.github.jellysquid3:lithium-fabric:${project.lithium_version}") { exclude(group: "net.fabricmc.fabric-api") }
    modRuntime("com.github.jellysquid3:phosphor-fabric:${project.phosphor_version}") { exclude(group: "net.fabricmc.fabric-api") }

    if (!Boolean.parseBoolean("${project.ip_enabled}")) { // Immersive Portals is incompatible with Canvas
        modImplementation("grondag:canvas-mc116:1.0.1267") {
            exclude group: "net.fabricmc"
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "me.shedaniel"
        }
    }
    modImplementation("net.shadew:jedt:0.1") {
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }

    include("net.shadew:shwutil:${project.shwutil_version}")
    implementation("net.shadew:shwutil:${project.shwutil_version}") // not a mod, no need for modImplementation

    include("net.shadew:ptg:${project.ptg_version}")
    implementation("net.shadew:ptg:${project.ptg_version}") // neither a mod

    if (Boolean.parseBoolean("${project.ip_enabled}")) {
        modImplementation("com.github.qouteall.ImmersivePortalsMod:build:${project.ip_version}") {
            exclude group: "net.fabricmc"
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "me.shedaniel.cloth"
            exclude group: "com.github.Virtuoel"
        }
    }
}

loom {
    accessWidener "src/main/resources/${project.archives_base_name}.accesswidener"

    runs {
        data {
            server()

            vmArg "-Dmarbles.datagen=true"
            vmArg "-Dmarbles.datagen.path=${project.file("src/generated/resources")};${project.file("$buildDir/resources/main")}"
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    def targetVersion = 8
}

// java {
// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this line, sources will not be generated.
// withSourcesJar()
// }

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            // artifact(sourcesJar) {
            // builtBy remapSourcesJar
            // }
        }
    }


    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/dodogang/marbles")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
            }
        }
    }
}

processResources {
    // Specify auto_datagen in your local gradle properties (~/.gradle/gradle.properties) if you want datagen to run
    // automatically
    if (project.getProperties().containsKey("auto_datagen") && Boolean.parseBoolean("${project.getProperties().get("auto_datagen")}")) {
        finalizedBy runData
    }
}

sourceSets.main.resources {
    srcDirs += "$projectDir/src/generated/resources"
}

loom {
    accessWidener "src/main/resources/marbles.accesswidener"
}
